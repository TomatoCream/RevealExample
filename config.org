#+TITLE: CONFIG
* user vars
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Wong Ding Feng"
      user-mail-address "dfwong5566@gmail.com")
#+END_SRC
* use-package
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
	       '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives
	       '("org" . "https://orgmode.org/elpa/") t)

  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  ;;Always demand if daemon-mode
  ;;(setq use-package-always-demand (daemonp))
#+END_SRC
* conunsel
  #+BEGIN_SRC emacs-lisp :results none
    (use-package counsel)
  #+END_SRC
* ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure counsel
    :config 
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
#+END_SRC
* which-key
  #+BEGIN_SRC emacs-lisp :results none
    (use-package which-key
      :ensure t
      :config
      (which-key-mode)
      (setq which-key-idle-delay 0.1))
  #+END_SRC
* moe-theme
  #+BEGIN_SRC emacs-lisp :results none
    (use-package moe-theme
      :ensure t
      :config
      (moe-dark))
  #+END_SRC
* yp
  #+BEGIN_SRC emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
  #+END_SRC
* littering
  #+BEGIN_SRC emacs-lisp
    (use-package no-littering
      :config
      (require 'recentf)
      (add-to-list 'recentf-exclude no-littering-var-directory)
      (add-to-list 'recentf-exclude no-littering-etc-directory)
      :config
      (setq auto-save-file-name-transforms
	    `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
  #+END_SRC
* auto-save-mode
  #+BEGIN_SRC emacs-lisp :results none
    (use-package super-save
      :config
      (super-save-mode 1))
  #+END_SRC
* lock
  #+BEGIN_SRC emacs-lisp
    (setq create-lockfiles nil)
  #+END_SRC
* pdf-tools
  #+BEGIN_SRC emacs-lisp :results none
    (use-package pdf-tools) 
  #+END_SRC
* org
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'org-modules 'org-drill)
    (use-package org
      :ensure org-plus-contrib
      :config
      (plist-put org-format-latex-options :scale 2.5)
      (org-babel-do-load-languages
	'org-babel-load-languages
	'((dot . t))))
  #+END_SRC
** org-drill
   #+BEGIN_SRC emacs-lisp :results none
     ;;(load "/home/df/.emacs.d.df/elpa/org-plus-contrib-20190225/org-drill.el")
     (use-package org-drill
       :load-path "/home/df/.emacs.d.df/elpa/org-plus-contrib-20190225/org-drill.el"
       :defer t 
       :ensure org-plus-contrib)
   #+END_SRC
** org-ref
   #+BEGIN_SRC emacs-lisp :results none
     (use-package org-ref
       :config
       (setq reftex-default-bibliography '("~/df/org/ref/master.bib"))
       (setq org-ref-bibliography-notes "~/df/org/ref/notes.org"
	     org-ref-default-bibliography '("~/df/org/ref/master.bib")
	     org-ref-pdf-directory "~/df/org/ref/pdfs/"))
       ;;(setq bibtex-completion-bibliography "~/df/org/ref/master.bib"
       ;;	     bibtex-completion-library-path "~/df/org/ref/pdfs/"
  ;;	     bibtex-completion-notes-path "~/df/org/ref/notes.org"))
   #+END_SRC
* menu bar mode
  #+BEGIN_SRC emacs-lisp
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
  #+END_SRC
* yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :config
      (yas-global-mode 1))
  #+END_SRC
* evil
  #+BEGIN_SRC emacs-lisp :results none
    (use-package evil
      :bind
      (:map evil-insert-state-map
            ("C-x C-f" . company-files))
      :config
      (evil-mode 1))
  #+END_SRC
* autosave
  #+BEGIN_SRC emacs-lisp :results none
    (defun save-all ()
      (interactive)
      (save-some-buffers t))

    (add-hook 'focus-out-hook 'save-all)
  #+END_SRC
* google this
  #+BEGIN_SRC emacs-lisp :results none
    (use-package google-this
      :config
      (google-this-mode 1))
  #+END_SRC
* Auto all 
  #+BEGIN_SRC emacs-lisp :results none
    (add-hook 'text-mode-hook 'turn-on-auto-fill)
  #+END_SRC
* compnay mode
  #+BEGIN_SRC emacs-lisp :results none
    (use-package company
      :bind
      (:map comint-mode-map
        ("<tab>" . company-complete-common))
      :config
      (global-company-mode)
      (setq company-ispell-dictionary (expand-file-name "./words_alpha.txt" user-emacs-directory)))
  #+END_SRC
* config
  #+BEGIN_SRC emacs-lisp :results none
    (use-package evil-surround
      :config
      (global-evil-surround-mode 1))
  #+END_SRC
* smart parens
  #+BEGIN_SRC emacs-lisp :results none
    (use-package smartparens
      :config
      (require 'smartparens-config)
      (sp-pair "$" "$") 
      (show-smartparens-global-mode 1)
      (smartparens-global-mode 1))
  #+END_SRC
* counsel-projectile
  #+BEGIN_SRC emacs-lisp :results none
    (use-package counsel-projectile
      :bind-keymap
      ("C-c p" . projectile-command-map))
  #+END_SRC
* projectile
  #+BEGIN_SRC emacs-lisp results none
    (use-package projectile
      :ensure counsel-projectile
      :bind-keymap
      ("C-c p" . projectile-command-map)) 
  #+END_SRC
* lsp
  #+BEGIN_SRC emacs-lisp :results none
    (use-package lsp-mode) 
  #+END_SRC
* company-lsp
  #+BEGIN_SRC emacs-lisp :results none
    (use-package company-lsp) 
  #+END_SRC
* lsp-ui
  #+BEGIN_SRC emacs-lisp :results none
    (use-package lsp-ui) 
  #+END_SRC
* ccls-cquery
  #+BEGIN_SRC emacs-lisp :results none
    (use-package ccls)
  #+END_SRC
* flycheck
  #+BEGIN_SRC emacs-lisp :results none
    (use-package flycheck) 
  #+END_SRC
* ripgrep
  #+BEGIN_SRC emacs-lisp :results none
    (use-package ripgrep)
  #+END_SRC
* magit
  #+BEGIN_SRC emacs-lisp :results none
    (use-package magit)
  #+END_SRC
* jumps
** dumb jump
   #+BEGIN_SRC emacs-lisp :results none
     (use-package dumb-jump)
   #+END_SRC
** jump
   #+BEGIN_SRC emacs-lisp :results none
     (use-package ace-jump-mode)
   #+END_SRC
* dashboard
  #+BEGIN_SRC emacs-lisp :results none
    (use-package dashboard
      :config
      (setq dashboard-items '((recents  . 5)
			      (bookmarks . 5)
			      (projects . 5)
			      (agenda . 5)
			      (registers . 5)))
      (dashboard-setup-startup-hook)) 
  #+END_SRC
* pdf
  #+BEGIN_SRC emacs-lisp :results none
    (use-package pdf-tools) 
  #+END_SRC
* dot
  #+BEGIN_SRC emacs-lisp :results none
    (use-package dot-mode)
    (use-package graphviz-dot-mode)
  #+END_SRC
* tabs
  #+BEGIN_SRC emacs-lisp :results none
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 2)
    (setq indent-line-function 'insert-tab)
    (setq tab-stop-list (number-sequence 2 200 2))
  #+END_SRC
* simple_SRC
  #+BEGIN_SRC emacs-lisp :results none
    (require 'generic-x) ;; we need this
    (define-generic-mode 
          'simple-mode                         ;; name of the mode to create
          '("!!")                           ;; comments start with '!!'
          '("procedure" "read" "call" "if" "else")                     ;; some keywords
          '(("=" . 'font-lock-operator)     ;; '=' is an operator
            (";" . 'font-lock-builtin))     ;; ';' is a built-in 
          '("\\.simple$")                      ;; files for which to activate this mode 
           nil                              ;; other functions to call
          "A mode for simple files"            ;; doc string for this mode
        )
  #+END_SRC
* pql
  #+BEGIN_SRC emacs-lisp :results none
    (require 'generic-x) ;; we need this
    (define-generic-mode 
          'pql-mode                         ;; name of the mode to create
          '("#")                           ;; comments start with '!!'
          '("program" "procedure" "stmt" "assign"
          "call" "while" "if" "read" "print"
          "variable" "then else" "and" "Select" "such that" "Calls" "Next" "Affects"
          "Uses" "UsesS" "UsesP" "Modifies" "ModifiesS" "ModifiesP")
          '(("=" . 'font-lock-operator)     ;; '=' is an operator
            (";" . 'font-lock-builtin))     ;; ';' is a built-in 
          '("\\.simple$")                      ;; files for which to activate this mode 
           nil                              ;; other functions to call
          "A mode for simple files"            ;; doc string for this mode
        )
  #+END_SRC
* wgrep
  #+BEGIN_SRC emacs-lisp :results none
    (use-package wgrep) 
  #+END_SRC
* base16
  #+BEGIN_SRC emacs-lisp :results none
    (defun refresh-theme ()
      (interactive)
      (progn
        (mapc #'disable-theme custom-enabled-themes)
        (load-theme 'base16 t))) 

    (use-package base16-theme
      :init
      :config
      (mapc #'disable-theme custom-enabled-themes)
      (load-theme 'base16-solarized-dark t)
      (mapc #'disable-theme custom-enabled-themes))
      ;;(load-theme 'base16 t))
  #+END_SRC
* transparency
  #+BEGIN_SRC emacs-lisp :results none
    (set-frame-parameter (selected-frame) 'alpha '(95 . 85)) 
    (add-to-list 'default-frame-alist '(alpha . (95 . 85)))
  #+END_SRC
* nix
** nixos-options
   #+BEGIN_SRC emacs-lisp :results none
     (use-package nixos-options)
   #+END_SRC
*** COMMENT company
    #+BEGIN_SRC emacs-lisp :results none
      (use-package company-nixos-options
        :config
        (add-to-list 'company-backends 'company-nixos-options))
    #+END_SRC
** nix mode
   #+BEGIN_SRC emacs-lisp :results none
     (use-package nix-mode) 
   #+END_SRC
* undo tree
  #+BEGIN_SRC emacs-lisp :results none
    (use-package undo-tree) 
  #+END_SRC
* smart jump
  #+BEGIN_SRC emacs-lisp :results none
    (use-package smart-jump
      :ensure t
      :config
      (smart-jump-setup-default-registers))
  #+END_SRC
* beacon mode
  #+BEGIN_SRC emacs-lisp :results none
    (use-package beacon
      :config
      (beacon-mode))
  #+END_SRC
* COMMENT auto-sudoedit
  #+BEGIN_SRC emacs-lisp :results none
    (use-package auto-sudoedit
      :config
      (auto-sudoedit-mode 1))
  #+END_SRC
* rainbow delimitters
  #+BEGIN_SRC emacs-lisp :results none
    (use-package rainbow-delimiters
      :config
      (rainbow-delimiters-mode))
  #+END_SRC
* avy
  #+BEGIN_SRC emacs-lisp :results none
    (use-package avy)
  #+END_SRC
* treemacs
  #+BEGIN_SRC emacs-lisp :results none
    (use-package treemacs
      :defer t
      :init
      (with-eval-after-load 'winum
        (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
      :config
      (progn
        (setq treemacs-collapse-dirs                 (if (executable-find "python") 3 0)
              treemacs-deferred-git-apply-delay      0.5
              treemacs-display-in-side-window        t
              treemacs-file-event-delay              5000
              treemacs-file-follow-delay             0.2
              treemacs-follow-after-init             t
              treemacs-git-command-pipe              ""
              treemacs-goto-tag-strategy             'refetch-index
              treemacs-indentation                   2
              treemacs-indentation-string            " "
              treemacs-is-never-other-window         nil
              treemacs-max-git-entries               5000
              treemacs-no-png-images                 nil
              treemacs-no-delete-other-windows       t
              treemacs-project-follow-cleanup        nil
              treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
              treemacs-recenter-distance             0.1
              treemacs-recenter-after-file-follow    nil
              treemacs-recenter-after-tag-follow     nil
              treemacs-recenter-after-project-jump   'always
              treemacs-recenter-after-project-expand 'on-distance
              treemacs-show-cursor                   nil
              treemacs-show-hidden-files             t
              treemacs-silent-filewatch              nil
              treemacs-silent-refresh                nil
              treemacs-sorting                       'alphabetic-desc
              treemacs-space-between-root-nodes      t
              treemacs-tag-follow-cleanup            t
              treemacs-tag-follow-delay              1.5
              treemacs-width                         35)

        ;; The default width and height of the icons is 22 pixels. If you are
        ;; using a Hi-DPI display, uncomment this to double the icon size.
        ;;(treemacs-resize-icons 44)

        (treemacs-follow-mode t)
        (treemacs-filewatch-mode t)
        (treemacs-fringe-indicator-mode t)
        (pcase (cons (not (null (executable-find "git")))
                     (not (null (executable-find "python3"))))
          (`(t . t)
           (treemacs-git-mode 'deferred))
          (`(t . _)
           (treemacs-git-mode 'simple))))
      :bind
      (:map global-map
            ("M-0"       . treemacs-select-window)
            ("C-x t 1"   . treemacs-delete-other-windows)
            ("C-x t t"   . treemacs)
            ("C-x t B"   . treemacs-bookmark)
            ("C-x t C-t" . treemacs-find-file)
            ("C-x t M-t" . treemacs-find-tag)))

    (use-package treemacs-evil
      :after treemacs evil
      :ensure t)

    (use-package treemacs-projectile
      :after treemacs projectile
      :ensure t)

    (use-package treemacs-icons-dired
      :after treemacs dired
      :ensure t
      :config (treemacs-icons-dired-mode))

    (use-package treemacs-magit
      :after treemacs magit
      :ensure t)
  #+END_SRC
* python
** jedi
   #+BEGIN_SRC emacs-lisp :results none
     (setq jedi:environment-root "jedi")  ; or any other name you like
     (setq jedi:environment-virtualenv
           (append python-environment-virtualenv
                   '("--python" "/run/current-system/sw/bin/python3")))
   #+END_SRC
* company jedi
  #+BEGIN_SRC emacs-lisp :results none
    (use-package company-jedi
      :hook
      (python-mode . (lambda ()
                       (add-to-list 'company-backends 'company-jedi)))
      :config
      (setq jedi:complete-on-dot t))
  #+END_SRC
* rainbow mode
  #+BEGIN_SRC emacs-lisp :results none
    (use-package rainbow-mode
      :config
      (rainbow-mod))
  #+END_SRC
* python
** alist
   #+BEGIN_SRC emacs-lisp :results none
     (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
   #+END_SRC
** ein
   #+BEGIN_SRC emacs-lisp :results none
     (use-package ein) 
   #+END_SRC
* hl-todo
  #+BEGIN_SRC emacs-lisp :results none
    (use-package hl-todo
      :bind
      (:map hl-todo-mode-map
           ("C-c p" . hl-todo-previous)
           ("C-c n" . hl-todo-next)
           ("C-c o" . hl-todo-occur))) 
  #+END_SRC
* center cursor
  #+BEGIN_SRC emacs-lisp :results none
    (use-package centered-cursor-mode)
  #+END_SRC
* reveal.js
  #+BEGIN_SRC emacs-lisp :results none
    (use-package org-re-reveal)
  #+END_SRC
